if(Interpolate){
dat.lat <- locfit_interpolate(dat.lat,Nseg=N.Body.Slice,Use.Weight=F,n.out=n.body.slice,nn=nn.b)
dat.dv <-locfit_interpolate(dat.dv,Nseg=N.Body.Slice,Use.Weight=F,n.out=n.body.slice,nn=nn.b)
if(Ffin) dat.ff <- locfit_interpolate(dat.ff,Nseg=N.Fin.Slice,n.out=n.fin.slice,nn=nn.f)
if(Hfin) dat.hf <- locfit_interpolate(dat.hf,Nseg=N.Fin.Slice,n.out=n.fin.slice,nn=nn.f)
if(Cfin) dat.cf <- locfit_interpolate(dat.cf,Nseg=N.Fin.Slice,n.out=n.fin.slice,nn=nn.f)
if(Dfin) dat.df <- locfit_interpolate(dat.df,Nseg=N.Fin.Slice,n.out=n.fin.slice,nn=nn.f)
if(D2fin) dat.d2 <- locfit_interpolate(dat.d2,Nseg=N.Fin.Slice,n.out=n.fin.slice,nn=nn.f)
if(Afin) dat.af <- locfit_interpolate(dat.af,Nseg=N.Fin.Slice,n.out=n.fin.slice,nn=nn.f)
if(Ceph) dat.ce <- locfit_interpolate(dat.ce,Nseg=N.Fin.Slice,n.out=n.fin.slice,nn=nn.f)
}
### Body when n=n1
mesh.body.1 <- mesh_body(dat.lat,dat.dv,nb=n1,X.center=0,Y.center=y.shift,
Z.onset=0,a.per.slice=a.per.slice,Mesh.Col=Mesh.Col,tol=Clean.Tol)
if(Save.Part.Mesh) Rvcg::vcgPlyWrite(mesh.body.1,paste0("./",Folder,"/Body_",n1,"_",
Fname.Add,".ply"),writeCol=F,writeNormals=T)
results[1,2] <- Rvcg::vcgArea(mesh.body.1)
results[1,1] <- Rvcg::vcgVolume(mesh.body.1)
### Body when n=n2
mesh.body.2 <- mesh_body(dat.lat,dat.dv,nb=n2,X.center=0,Y.center=y.shift,
Z.onset=0,a.per.slice=a.per.slice,Mesh.Col=Mesh.Col,tol=Clean.Tol)
if(Save.Part.Mesh) Rvcg::vcgPlyWrite(mesh.body.2,paste0("./",Folder,"/Body_",n2,"_",
Fname.Add,".ply"),writeCol=F,writeNormals=T)
results[2,2] <- Rvcg::vcgArea(mesh.body.2)
results[2,1] <- Rvcg::vcgVolume(mesh.body.2)
### Caudal Fluke
# Xc, Yc, Zc    Global coordinates for the caudal fluke.
# .onset        Anterior margin center of the fluke in global coordinate
if(Cfin){
Yc.onset <- dat.lat[nrow(dat.lat),4] + cfin.adj.up + y.shift
Xc.onset <- 0
Zc.onset <- cfin.onset
mesh.cf <- mesh_foil(dat.cf,tf=cfin.thick,X.onset=Xc.onset,Y.onset=Yc.onset,
Z.onset=Zc.onset,tol=Clean.Tol,Thickest=0.5,Center=T,
a.per.slice=a.per.slice,Mesh.Col=Mesh.Col)
Mesh.Cfin <- mesh.cf$Mesh
### Fin sweep and rotation
Xc <- mesh.cf$X
Yc <- mesh.cf$Y
Zc <- mesh.cf$Z
hn.c <- round(ncol(Xc)/2,0)
Mesh.Cfin <- Morpho::rotaxis3d(Mesh.Cfin,c(Xc[qtr.round.pos,hn.c],Yc[qtr.round.pos,
hn.c],Zc[qtr.round.pos,hn.c]),c(Xc[qtr.round.neg,hn.c],Yc[qtr.round.neg,
hn.c],Zc[qtr.round.neg,hn.c]),cfin.sweep)
Mesh.Cfin <- Morpho::rotaxis3d(Mesh.Cfin,c(Xc[1,hn.c],Yc[1,hn.c],Zc[1,hn.c]),
c(Xc[hlf.round,hn.c],Yc[hlf.round,hn.c],Zc[hlf.round,hn.c]),cfin.rot)
### Mesh saving
if(Save.Part.Mesh) Rvcg::vcgPlyWrite(Mesh.Cfin,paste0("./",Folder,"/CaudalFluke_",
Fname.Add,".ply"),writeCol=F,writeNormals=F)
### Measure
results[3,2] <- Rvcg::vcgArea(Mesh.Cfin)
results[3,1] <- Rvcg::vcgVolume(Mesh.Cfin)
}
### Dorsal Fin
# Xd, Yd, Zd    Global coordinates for the dorsal fin.
# .onset        Antero-ventral corner of the dorsal fin in global coordinate
if(Dfin){
Zd.onset <- dfin.onset
Xd.onset <- 0
Yd.onset <- dfin.adj.up + y.shift
mesh.df <- mesh_foil(dat.df,tf=dfin.thick,X.onset=Xd.onset,Y.onset=Yd.onset,
Z.onset=Zd.onset,tol=Clean.Tol,Thickest=0.1,Center=F,
a.per.slice=a.per.slice,Mesh.Col=Mesh.Col)
Mesh.Dfin <- mesh.df$Mesh
### Fin sweep and mesh saving
Xd <- mesh.df$X
Yd <- mesh.df$Y
Zd <- mesh.df$Z
hn.d <- round(ncol(Xd)/2,0)
Mesh.Dfin <- Morpho::rotaxis3d(Mesh.Dfin,c(Xd[qtr.round.pos,hn.d],Yd[qtr.round.pos,
hn.d],Zd[qtr.round.pos,hn.d]),c(Xd[qtr.round.neg,hn.d],Yd[qtr.round.neg,
hn.d],Zd[qtr.round.neg,hn.d]),dfin.sweep)
### Mesh saving
if(Save.Part.Mesh) Rvcg::vcgPlyWrite(Mesh.Dfin,paste0("./",Folder,"/DorsalFin_",
name.Add,".ply"),writeCol=F,writeNormals=F)
### Measure
results[4,2] <- Rvcg::vcgArea(Mesh.Dfin)
results[4,1] <- Rvcg::vcgVolume(Mesh.Dfin)
}
### Dorsal Fin 2 (Second dorsal fin)
if(D2fin){
Zd2.onset <- d2fin.onset
Xd2.onset <- 0
Yd2.onset <- d2fin.adj.up + y.shift
mesh.d2 <- mesh_foil(dat.d2,tf=d2fin.thick,X.onset=Xd2.onset,Y.onset=Yd2.onset,
Z.onset=Zd2.onset,tol=Clean.Tol,Thickest=0.1,Center=F,
a.per.slice=a.per.slice,Mesh.Col=Mesh.Col)
Mesh.D2fin <- mesh.d2$Mesh
### Fin sweep and mesh saving
Xd2 <- mesh.d2$X
Yd2 <- mesh.d2$Y
Zd2 <- mesh.d2$Z
hn.d2 <- round(ncol(Xd2)/2,0)
Mesh.D2fin <- Morpho::rotaxis3d(Mesh.D2fin,c(Xd[qtr.round.pos,hn.d2],Yd[qtr.round.pos,
hn.d2],Zd[qtr.round.pos,hn.d2]),c(Xd[qtr.round.neg,hn.d2],Yd[qtr.round.neg,
hn.d2],Zd[qtr.round.neg,hn.d2]),dfin.sweep)
### Mesh saving
if(Save.Part.Mesh) Rvcg::vcgPlyWrite(Mesh.D2fin,paste0("./",Folder,"/DorsalFin2_",Fname.Add,".ply"),
writeCol=F,writeNormals=F)
### Measure
results[9,2] <- Rvcg::vcgArea(Mesh.D2fin)
results[9,1] <- Rvcg::vcgVolume(Mesh.D2fin)
}
### Anal Fin
# Xa, Ya, Za    Global coordinates for the anal fin.
# .onset        Antero-ventral corner of the anal fin in global coordinate
if(Afin){
Za.onset <- afin.onset
Xa.onset <- 0
Ya.onset <- afin.adj.up + y.shift
mesh.af <- mesh_foil(dat.af,tf=afin.thick,X.onset=Xa.onset,Y.onset=Ya.onset,
Z.onset=Za.onset,tol=Clean.Tol,Thickest=0.9,Center=F,
a.per.slice=a.per.slice,Mesh.Col=Mesh.Col)
Mesh.afin <- mesh.af$Mesh
### Fin sweep and mesh saving
Xa <- mesh.af$X
Ya <- mesh.af$Y
Za <- mesh.af$Z
hn.a <- round(ncol(Xa)/2,0)
Mesh.afin <- Morpho::rotaxis3d(Mesh.afin,c(Xa[qtr.round.pos,hn.a],Ya[qtr.round.pos,
hn.a],Za[qtr.round.pos,hn.a]),c(Xa[qtr.round.neg,hn.a],Ya[qtr.round.neg,
hn.a],Za[qtr.round.neg,hn.a]),dfin.sweep)
# Mesh saving
if(Save.Part.Mesh) Rvcg::vcgPlyWrite(Mesh.afin,paste0("./",Folder,"/AnalFin_",Fname.Add,".ply"),
writeCol=F,writeNormals=F)
### Measure
results[10,2] <- Rvcg::vcgArea(Mesh.afin)
results[10,1] <- Rvcg::vcgVolume(Mesh.afin)
}
### Cephalofoil
# Xe, Ye, Zec    Global coordinates for the cephalofoil
# .onset        Anterior margin center cephalofoil in global coordinate
if(Ceph){
Ye.onset <- ceph.adj.up + y.shift
Xe.onset <- 0
Ze.onset <- ceph.onset
mesh.ce <- mesh_foil(dat.ce,tf=ceph.thick,X.onset=Xe.onset,Y.onset=Ye.onset,
Z.onset=Ze.onset,tol=Clean.Tol,Thickest=0.5,Center=T,
a.per.slice=a.per.slice,Mesh.Col=Mesh.Col,Cephalofoil=T)
Mesh.ceph <- mesh.ce$Mesh
### Cephalofoil sweep and rotation
Xe <- mesh.ce$X
Ye <- mesh.ce$Y
Ze <- mesh.ce$Z
hn.e <- round(ncol(Xe)/2,0)
Mesh.ceph <- Morpho::rotaxis3d(Mesh.ceph,c(Xe[qtr.round.pos,hn.e],Ye[qtr.round.pos,
hn.e],Ze[qtr.round.pos,hn.e]),c(Xe[qtr.round.neg,hn.e],Ye[qtr.round.neg,
hn.e],Ze[qtr.round.neg,hn.e]),ceph.sweep)
Mesh.ceph <- Morpho::rotaxis3d(Mesh.ceph,c(Xe[1,hn.e],Ye[1,hn.e],Ze[1,hn.e]),
c(Xe[hlf.round,hn.e],Ye[hlf.round,hn.e],Ze[hlf.round,hn.e]),ceph.rot)
### Mesh saving
if(Save.Part.Mesh) Rvcg::vcgPlyWrite(Mesh.ceph,paste0("./",Folder,"/Cephalofoil_",Fname.Add,".ply"),
writeCol=F,writeNormals=F)
### Measure
results[11,2] <- Rvcg::vcgArea(Mesh.ceph)
results[11,1] <- Rvcg::vcgVolume(Mesh.ceph)
}
### Forefin
# Xf, Yf, Zf    Global coordinates for the forefin.
# .onset        Anterior margin center of the forefin in global coordinate.
if(Ffin){
Zf.onset <- ffin.onset
zf.onset <- match(Zf.onset,round(dat.dv[,1],0))
Xfl.onset <- dat.dv[zf.onset,3]-dat.dv[1,4]+ffin.adj.med
Xfr.onset <- dat.dv[zf.onset,2]-dat.dv[1,4]-ffin.adj.med
# Yf.onset <- dat.lat[zf.onset,3]+ffin.adj.up + y.shift
Yf.onset <- ffin.adj.up + y.shift
mesh.ffr <- mesh_foil(dat.ff,tf=ffin.thick,X.onset=Xfr.onset,Y.onset=Yf.onset,
Z.onset=Zf.onset,tol=Clean.Tol,Thickest=0.9,Center=F,
a.per.slice=a.per.slice,Mesh.Col=Mesh.Col)
mesh.ffl <- mesh_foil(dat.ff,tf=ffin.thick,X.onset=Xfl.onset,Y.onset=Yf.onset,
Z.onset=Zf.onset,tol=Clean.Tol,Thickest=0.9,Center=F,
a.per.slice=a.per.slice,Mesh.Col=Mesh.Col)
Mesh.ffinr <- mesh.ffr$Mesh
Mesh.ffinl <- mesh.ffl$Mesh
Xfl <- mesh.ffl$X
Xfr <- mesh.ffr$X
Yf <- mesh.ffr$Y
Zf <- mesh.ffr$Z
n.ff <- ncol(Yf)
### Right fin sweep, rotation, and mesh saving
Mesh.ffinr <- Morpho::rotaxis3d(Mesh.ffinr,c(Xfr[1,n.ff],Yf[1,n.ff],Zf[1,n.ff]),
c(Xfl[1,n.ff],Yf[1,n.ff],Zf[1,n.ff]),ffin.sweep)
Mesh.ffinr <- Morpho::rotaxis3d(Mesh.ffinr,c(Xfr[1,n.ff],Yf[1,n.ff],Zf[1,n.ff]),
c(Xfr[91,n.ff],Yf[91,n.ff],Zf[91,n.ff]),ffin.spread)
if(Save.Part.Mesh) vcgPlyWrite(Mesh.ffinr,paste0("./",Folder,"/Forefin_R_",Fname.Add,".ply"),
writeCol=F,writeNormals=F)
### Left fin sweep, rotation, and mesh saving
Mesh.ffinl <- Morpho::rotaxis3d(Mesh.ffinl,c(Xfl[1,n.ff],Yf[1,n.ff],Zf[1,n.ff]),
c(Xfr[1,n.ff],Yf[1,n.ff],Zf[1,n.ff]),-ffin.sweep)
Mesh.ffinl <- Morpho::rotaxis3d(Mesh.ffinl,c(Xfl[1,n.ff],Yf[1,n.ff],Zf[1,n.ff]),
c(Xfl[91,n.ff],Yf[91,n.ff],Zf[91,n.ff]),-ffin.spread)
if(Save.Part.Mesh) Rvcg::vcgPlyWrite(Mesh.ffinl,paste0("./",Folder,"/Forefin_L_",Fname.Add,".ply"),
writeCol=F,writeNormals=F)
### Measure
results[6,2] <- results[5,2] <- Rvcg::vcgArea(Mesh.ffinr)
results[6,1] <- results[5,1] <- Rvcg::vcgVolume(Mesh.ffinr)
}
### HinDfin
# Xh, Yh, Zh    Global coordinates for the hinDfin.
# .onset        Anterior margin center of the hinDfin in global coordinate
if(Hfin){
Zh.onset <- hfin.onset
zh.onset <- match(Zh.onset,round(dat.dv[,1],0))
Xhl.onset <- dat.dv[zh.onset,3]-dat.dv[1,4]+hfin.adj.med
Xhr.onset <- dat.dv[zh.onset,2]-dat.dv[1,4]-hfin.adj.med
# Yh.onset <- dat.lat[zh.onset,3] + hfin.adj.up + y.shift
Yh.onset <- hfin.adj.up + y.shift
mesh.hfr <- mesh_foil(dat.hf,tf=hfin.thick,X.onset=Xhr.onset,Y.onset=Yh.onset,
Z.onset=Zh.onset,tol=Clean.Tol,Thickest=0.9,Center=F,
a.per.slice=a.per.slice,Mesh.Col=Mesh.Col)
mesh.hfl <- mesh_foil(dat.hf,tf=hfin.thick,X.onset=Xhl.onset,Y.onset=Yh.onset,
Z.onset=Zh.onset,tol=Clean.Tol,Thickest=0.9,Center=F,
a.per.slice=a.per.slice,Mesh.Col=Mesh.Col)
Mesh.hfinr <- mesh.hfr$Mesh
Mesh.hfinl <- mesh.hfl$Mesh
Xhl <- mesh.hfl$X
Xhr <- mesh.hfr$X
Yh <- mesh.hfr$Y
Zh <- mesh.hfr$Z
n.hf <- ncol(Yh)
#Right fin sweep, rotation, and mesh saving
Mesh.hfinr <- Morpho::rotaxis3d(Mesh.hfinr,c(Xhr[1,n.hf],Yh[1,n.hf],Zh[1,n.hf]),
c(Xhl[1,n.hf],Yh[1,n.hf],Zh[1,n.hf]),hfin.sweep)
Mesh.hfinr <- Morpho::rotaxis3d(Mesh.hfinr,c(Xhr[1,n.hf],Yh[1,n.hf],Zh[1,n.hf]),
c(Xhr[91,n.hf],Yh[91,n.hf],Zh[91,n.hf]),hfin.spread)
if(Save.Part.Mesh) vcgPlyWrite(Mesh.hfinr,paste0("./",Folder,"/HinDfin_R_",Fname.Add,".ply"),
writeCol=F,writeNormals=F)
#Left fin sweep, rotation, and mesh saving
Mesh.hfinl <- Morpho::rotaxis3d(Mesh.hfinl,c(Xhl[1,n.hf],Yh[1,n.hf],Zh[1,n.hf]),
c(Xhr[1,n.hf],Yh[1,n.hf],Zh[1,n.hf]),-hfin.sweep)
Mesh.hfinl <- Morpho::rotaxis3d(Mesh.hfinl,c(Xhl[1,n.hf],Yh[1,n.hf],Zh[1,n.hf]),
c(Xhl[91,n.hf],Yh[91,n.hf],Zh[91,n.hf]),-hfin.spread)
if(Save.Part.Mesh) Rvcg::vcgPlyWrite(Mesh.hfinl,paste0("./",Folder,"/HinDfin_L_",Fname.Add,".ply"),
writeCol=F,writeNormals=F)
### Measure
results[8,2] <- results[7,2] <- Rvcg::vcgArea(Mesh.hfinr)
results[8,1] <- results[7,1] <- Rvcg::vcgVolume(Mesh.hfinr)
}
### Combining measurements
Results <- cbind(results,results[,1]*(px.L^3),results[,2]*(px.L^2))
Results <- cbind(Results, Results[,3]*(10^3), Results[,3]*dens*(10^3))
RESULTS <- rbind(Results, Total_1=colSums(Results[-2,],na.rm=T))
RESULTS <- rbind(RESULTS, Total_2=colSums(Results[-1,],na.rm=T))
RESULTS <- rbind(RESULTS, colMeans(tail(RESULTS,2),na.rm=T))
RESULTS[,1:2] <- round(RESULTS[,1:2],1)
RESULTS[,3] <- round(RESULTS[,3],6)
RESULTS[,4] <- round(RESULTS[,4],4)
RESULTS[,5:6] <- round(RESULTS[,5:6],3)
dimnames(RESULTS) <- list(Parts.Complete,Chars.Complete)
print(RESULTS)
if(Save.Csv)write.csv(RESULTS, paste0("./",Folder,"/Results_",Folder,"_",Fname.Add,".csv"))
### Combining meshes and calculate centroids
Mesh.fins <- merge(Mesh.ffinl,Mesh.ffinr)
if(Cfin) Mesh.fins <- merge(Mesh.fins,Mesh.Cfin)
if(Dfin) Mesh.fins <- merge(Mesh.fins, Mesh.Dfin)
if(Hfin) Mesh.fins <- merge(Mesh.fins,Mesh.hfinl,Mesh.hfinr)
if(D2fin) Mesh.fins <- merge(Mesh.fins,Mesh.D2fin)
if(Afin) Mesh.fins <- merge(Mesh.fins,Mesh.afin)
if(Ceph) Mesh.fins <- merge(Mesh.fins,Mesh.ceph)
Mesh.whole.1 <- merge(mesh.body.1,Mesh.fins)
Centroid.1 <- round(rowMeans(Mesh.whole.1$vb)[1:3],2)
Mesh.whole.2 <- merge(mesh.body.2,Mesh.fins)
Centroid.2 <- round(rowMeans(Mesh.whole.2$vb)[1:3],2)
if(Save.Total.Mesh){
Rvcg::vcgPlyWrite(Mesh.whole.1,paste0("./",Folder,"/Combined.",n1,".ply"),
writeCol=F,writeNormals=F)
Rvcg::vcgPlyWrite(Mesh.whole.2,paste0("./",Folder,"/Combined.",n2,".ply"),
writeCol=F,writeNormals=F)
print("3D meshes have been saved as .ply files.")
}
Centroids <-(rbind(Centroid.1,Centroid.2))
colnames(Centroids) <- c("X","Y","Z")
print(Centroids)
if(Save.Csv) write.csv(Centroids,paste0("./",Folder,"/Centroids_",Folder,"_",Fname.Add,".csv"))
### 3D plotting of combined meshes
if(Plot.Result.Mesh){
rgl::open3d()
if(N.Mesh.Window=="one"){
rgl::par3d(windowRect = c(20, 30, 800, 500))
rgl::layout3d(matrix(seq(1,2),1,2))
}
rgl::plot3d(Mesh.whole.1,asp="iso",col=Mesh.Col)
if(N.Mesh.Window=="two") open3d()
rgl::plot3d(Mesh.whole.2,asp="iso",col=Mesh.Col)
}
return(invisible(RESULTS))
}
paleomass()
paleomass()
library(paleomass)
paleomass()
devtools::load_all("P:/My Documents/MANU/Paleomass2/R_Project/paleomass")
paleomass()
devtools::load_all("P:/My Documents/MANU/Paleomass2/R_Project/paleomass")
paleomass()
library(paleomass)
paleomass()
devtools::load_all("P:/My Documents/MANU/Paleomass2/R_Project/paleomass")
library(paleomass)
paleomass
paleomass()
library(paleomass)
paleomass()
# paleomass()
# paleomass(N.Body.Slice = "asis",N.Body.Slice = "asis")
# paleomass(N.Body.Slice="provided",n.body.slice=2000,N.Fin.Slice="provided",n.fin.slice=500)
paleomass(N.Mesh.Window = c("two","one"))
# paleomass()
# paleomass(N.Body.Slice = "asis",N.Body.Slice = "asis")
# paleomass(N.Body.Slice="provided",n.body.slice=2000,N.Fin.Slice="provided",n.fin.slice=500)
paleomass(N.Mesh.Window = "one")
paleomass(Folder="Plesiosaurus",fork.l=2.94,Cfin=F,Dfin=F,ffin.onset=450,
hfin.onset=650,ffin.adj.med=10,hfin.adj.med=40,ffin.adj.up=-160,
hfin.adj.up=-160,ffin.spread=pi/3,hfin.spread=pi/4,N.Mesh.Window = "one")
paleomass(Folder="Sphyrna",fork.l=2,n2=1.8,Afin=T,D2fin=T,Ceph=T,
ffin.onset=300, ffin.adj.up=-120,ffin.adj.med=40,ffin.spread=pi/4,
ffin.sweep=-pi*0/180,
hfin.onset=550,hfin.adj.up=10,hfin.adj.med=40,hfin.spread=pi/4,hfin.thick=10,
hfin.sweep=pi*5/180,
cfin.onset=920,cfin.adj.up=35,
dfin.onset=350,dfin.adj.up=190,dfin.sweep=pi*5/180,
d2fin.onset=800,d2fin.adj.up=200,,d2fin.sweep=pi*5/180,d2fin.thick=10,
afin.onset=800,afin.adj.up=60,afin.sweep=pi*20/180,afin.thick=10,
ceph.onset=-45,ceph.adj.up=120, ceph.rot=pi/2,N.Mesh.Window = "one")
paleomass(folder="Plesiosaurus")
paleomass(Folder="Plesiosaurus")
paleomass(Folder = "Plesiosaurus",Dfin = F, Cfin = F)
library(paleomass)
paleomass(Folder="Plesiosaurus",Dfin=F,Cfin=F,Test.Run=T)
library(paleomass)
paleomass(Folder="Plesiosaurus",Dfin=F,Cfin=F,Test.Run=T)
paleomass(Folder = "Plesiosaurus", fork.l = 2.94, Cfin = F, Dfin = F, ffin.onset = 450, hfin.onset = 650, ffin.adj.med = 10, hfin.adj.med = 40, ffin.adj.up = -160, hfin.adj.up = -160, ffin.sweep = pi/6, hfin.sweep =  pi/7, ffin.spread = pi/3, hfin.spread = pi/4)
library(paleomass)
Mb  <- plot3D::mesh(seq(0, pi*2, length.out = a.per.slice),seq(1,nrow(dat.lat)))
library(paleomass)
if(R.Version()$os == "linux-gnu"){
setwd("/mnt/p/My Documents/MANU/Paleomass2/R/")
} else {
setwd("P:/My Documents/MANU/Paleomass2/R/")
}
paleomass(Interpolate=F)
paleomass()
source("P:/My Documents/MANU/Paleomass2/R/PaleomassR_1.0b.R")
Cfin <- file.exists()Cfin Logical. If the caudal fin is present.
?file.exists
?stop
devtools::load_all(".")
devtools::load_all(".")
if(R.Version()$os == "linux-gnu"){
setwd("/mnt/p/My Documents/MANU/Paleomass2/R/")
} else {
setwd("P:/My Documents/MANU/Paleomass2/R/")
}
paleomass()
devtools::load_all("P:/My Documents/MANU/Paleomass2/R_Project/paleomass")
paleomass()
devtools::load_all("P:/My Documents/MANU/Paleomass2/R_Project/paleomass")
paleomass()
devtools::load_all("P:/My Documents/MANU/Paleomass2/R_Project/paleomass")
?paleomass
devtools::load_all("P:/My Documents/MANU/Paleomass2/R_Project/paleomass")
library(paleomass)
?paleomass
if(R.Version()$os == "linux-gnu"){
setwd("/mnt/p/My Documents/MANU/Paleomass2/R/")
} else {
setwd("P:/My Documents/MANU/Paleomass2/R/")
}
paleomass(Folder="Plesiosaurus")
paleomass(Folder="Plesiosaurus",Test.Run=T)
?paleomass
library(paleomass)
?paleomass
library(paleomass)
?paleomass
devtools::load_all("P:/My Documents/MANU/Paleomass2/R_Project/paleomass")
library(paleomass)
?paleomass
devtools::load_all("P:/My Documents/MANU/Paleomass2/R_Project/paleomass")
library(paleomass)
?paleomass
detach("package:paleomass", unload = TRUE)
install.packages("P:/My Documents/MANU/Paleomass2/R_Project/paleomass_0.9.6.0000.zip", repos = NULL, type = "win.binary")
library(paleomass)
?paleomass
help(package="paleomass")
devtools::load_all(".")
paleomass()
if(R.Version()$os == "linux-gnu"){
setwd("/mnt/p/My Documents/MANU/Paleomass2/R/")
} else {
setwd("P:/My Documents/MANU/Paleomass2/R/")
}
paleomass()
warnings()
devtools::load_all(".")
paleomass()
if(R.Version()$os == "linux-gnu"){
setwd("/mnt/p/My Documents/MANU/Paleomass2/R/")
} else {
setwd("P:/My Documents/MANU/Paleomass2/R/")
}
paleomass()
devtools::load_all("P:/My Documents/MANU/Paleomass2/R_Project/paleomass")
paleomass()
warnings()
devtools::load_all("P:/My Documents/MANU/Paleomass2/R_Project/paleomass")
paleomass()
devtools::load_all("P:/My Documents/MANU/Paleomass2/R_Project/paleomass")
paleomass()
paleomass()
paleomass(Tes.Run=T)
paleomass(Test.Run = T)
devtools::load_all("P:/My Documents/MANU/Paleomass2/R_Project/paleomass")
paleomass()
paleomass("Plesiosaurus",Test.Run=T)
paleomass(Folder="Plesiosaurus",fork.l=2.94,Cfin=F,Dfin=F,ffin.onset=450,
hfin.onset=650,ffin.adj.med=10,hfin.adj.med=40,ffin.adj.up=-160,
hfin.adj.up=-160,ffin.spread=pi/3,hfin.spread=pi/4,N.Mesh.Window = "one")
paleomass(Folder="Plesiosaurus",fork.l=2.94,Cfin=F,Dfin=F,ffin.onset=450,
hfin.onset=650,ffin.adj.med=10,hfin.adj.med=40,ffin.adj.up=-160,
hfin.adj.up=-160,ffin.spread=-pi/3,hfin.spread=-pi/4,N.Mesh.Window = "one")
paleomass(Folder="Plesiosaurus",fork.l=2.94,Cfin=F,Dfin=F,ffin.onset=450,
hfin.onset=650,ffin.adj.med=-10,hfin.adj.med=-40,ffin.adj.up=-160,
hfin.adj.up=-160,ffin.spread=-pi/3,hfin.spread=-pi/4,N.Mesh.Window = "one")
devtools::load_all("P:/My Documents/MANU/Paleomass2/R_Project/paleomass")
devtools::load_all("P:/My Documents/MANU/Paleomass2/R_Project/paleomass")
paleomass()
paleomass(Folder="Plesiosaurus",fork.l=2.94,Cfin=F,Dfin=F,ffin.onset=450,
hfin.onset=650,ffin.adj.med=10,hfin.adj.med=40,ffin.adj.up=-160,
hfin.adj.up=-160,ffin.spread=pi/3,hfin.spread=pi/4,N.Mesh.Window = "one")
paleomass(Folder="Plesiosaurus",fork.l=2.94,Cfin=F,Dfin=F,ffin.onset=450,
hfin.onset=650,ffin.adj.lat=10,hfin.adj.lat=40,ffin.adj.up=-160,
hfin.adj.up=-160,ffin.spread=pi/3,hfin.spread=pi/4,N.Mesh.Window = "one")
paleomass(Folder="Plesiosaurus",fork.l=2.94,Cfin=F,Dfin=F,ffin.onset=450,
hfin.onset=650,ffin.adj.lat=-10,hfin.adj.lat=-40,ffin.adj.up=-160,
hfin.adj.up=-160,ffin.spread=pi/3,hfin.spread=pi/4,N.Mesh.Window = "one")
devtools::load_all("P:/My Documents/MANU/Paleomass2/R_Project/paleomass")
paleomass(Test.Run = T)
devtools::load_all("P:/My Documents/MANU/Paleomass2/R_Project/paleomass")
paleomass(Test.Run=T)
devtools::load_all("P:/My Documents/MANU/Paleomass2/R_Project/paleomass")
paleomass(Test.Run=T)
devtools::load_all("P:/My Documents/MANU/Paleomass2/R_Project/paleomass")
paleomass(Folder="Sphyrna",fork.l=2,n2=1.8,Afin=T,D2fin=T,Ceph=T,
ffin.onset=300, ffin.adj.up=-120,ffin.adj.lat=40,ffin.spread=pi/4,
ffin.sweep=-pi*0/180,
hfin.onset=550,hfin.adj.up=10,hfin.adj.lat=40,hfin.spread=pi/4,hfin.thick=10,
hfin.sweep=pi*5/180,
cfin.onset=920,cfin.adj.up=35,
dfin.onset=350,dfin.adj.up=190,dfin.sweep=pi*5/180,
d2fin.onset=800,d2fin.adj.up=200,,d2fin.sweep=pi*5/180,d2fin.thick=10,
afin.onset=800,afin.adj.up=60,afin.sweep=pi*20/180,afin.thick=10,
ceph.onset=-45,ceph.adj.up=120, ceph.rot=pi/2,N.Mesh.Window = "one")
paleomass(Folder="Sphyrna",fork.l=2,n2=1.8,
ffin.onset=300, ffin.adj.up=-120,ffin.adj.lat=-40,ffin.spread=pi/4,
ffin.sweep=-pi*0/180,
hfin.onset=550,hfin.adj.up=10,hfin.adj.lat=-40,hfin.spread=pi/4,hfin.thick=10,
hfin.sweep=pi*5/180,
cfin.onset=920,cfin.adj.up=35,
dfin.onset=350,dfin.adj.up=190,dfin.sweep=pi*5/180,
d2fin.onset=800,d2fin.adj.up=200,,d2fin.sweep=pi*5/180,d2fin.thick=10,
afin.onset=800,afin.adj.up=60,afin.sweep=pi*20/180,afin.thick=10,
ceph.onset=-45,ceph.adj.up=120, ceph.rot=pi/2,N.Mesh.Window = "one")
paleomass(Folder="Plesiosaurus",fork.l=2.94,Cfin=F,Dfin=F,ffin.onset=450,
hfin.onset=650,ffin.adj.lat=-10,hfin.adj.lat=-40,ffin.adj.up=-160,
hfin.adj.up=-160,ffin.spread=pi/3,hfin.spread=pi/4,N.Mesh.Window = "one")
paleomass(Folder="Plesiosaurus",fork.l=2.94,Cfin=F,Dfin=F,ffin.onset=450,
hfin.onset=650,ffin.adj.lat=-10,hfin.adj.lat=-40,ffin.adj.up=-160,
hfin.adj.up=-160,ffin.spread=pi/3,hfin.spread=pi/4,N.Mesh.Window = "two")
paleomass(Folder="Plesiosaurus",fork.l=2.94,Cfin=F,Dfin=F,ffin.onset=450,
hfin.onset=650,ffin.adj.lat=-10,hfin.adj.lat=-40,ffin.adj.up=-160,
hfin.adj.up=-160,ffin.spread=0,hfin.spread=0,N.Mesh.Window = "two")
paleomass(Folder="Plesiosaurus",fork.l=2.94,Cfin=F,Dfin=F,ffin.onset=450,
hfin.onset=650,ffin.adj.lat=-10,hfin.adj.lat=-40,ffin.adj.up=-160,
hfin.adj.up=-160,ffin.spread=0,hfin.spread=0,ffin.sweep=pi/6,
hfin.sweep=pi/6,N.Mesh.Window = "two")
paleomass(Folder="Plesiosaurus",fork.l=2.94,Cfin=F,Dfin=F,ffin.onset=450,
hfin.onset=650,ffin.adj.lat=-10,hfin.adj.lat=-40,ffin.adj.up=-160,
hfin.adj.up=-160,ffin.spread=pi/3,hfin.spread=pi/3,N.Mesh.Window = "two")
library(paleomass)
paleomass()
?paleomass
library(devtools)
usethis::use_vignette("Command options explained better")
devtools::build_rmd("vignettes/Intro_to_Paleomass.Rmd")
package_file()
rlang::last_error()
rlang::last_trace()
detach("package:paleomass", unload = TRUE)
install.packages("P:/My Documents/MANU/Paleomass2/R_Project/paleomass_0.9.6.0000.zip", repos = NULL, type = "win.binary")
library(paleomass)
?paleomass
library(devtools)
use_vignette("Intro",title = "Introduction to the paleomass package")
getwd()
setwd(P:/My Documents/MANU/Paleomass2/R_Project/paleomass/)
setwd("P:/My Documents/MANU/Paleomass2/R_Project/paleomass/")
use_vignette("Intro",title = "Introduction to the paleomass package")
install.packages("P:/My Documents/MANU/Paleomass2/R_Project/paleomass_0.9.6.0000.tar.gz", repos = NULL, type = "source")
library(paleomass)
help(package="paleomass")
use_vignette("Options",title = "Command options explained better")
detach("package:paleomass", unload = TRUE)
install.packages("P:/My Documents/MANU/Paleomass2/R_Project/paleomass_0.9.6.0000.tar.gz", repos = NULL, type = "source")
library(paleomass)
help(package="paleomass")
detach("package:paleomass", unload = TRUE)
install.packages("P:/My Documents/MANU/Paleomass2/R_Project/paleomass_0.9.6.0000.tar.gz", repos = NULL, type = "source")
library(paleomass)
?paleomass
